CCS PCM C Compiler, Version 5.015, 5967               05-Jun.-18 12:31

               Filename:   D:\Trabajo o proyectos\Proyectos electronicos\Generador de frecuencias\GEN_FREC_3400.lst

               ROM used:   1369 words (17%)
                           Largest free fragment is 2048
               RAM used:   38 (10%) at main() level
                           63 (17%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   485
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #define LCD_ENABLE_PIN  PIN_D3                                    //// 
.................... #define LCD_RS_PIN      PIN_D2                                    //// 
.................... #define LCD_RW_PIN      PIN_A0                                    //// 
.................... #define LCD_DATA4       PIN_D4                                    //// 
.................... #define LCD_DATA5       PIN_D5                                    //// 
.................... #define LCD_DATA6       PIN_D6                                    //// 
.................... #define LCD_DATA7       PIN_D7 
.................... //Termino de las conexiones LCD 
....................  
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
005A:  DATA 45,39
005B:  DATA F2,37
005C:  DATA 72,00
005D:  DATA 0C,00
005E:  DATA C3,30
005F:  DATA F2,33
0060:  DATA 61,1D
0061:  DATA A0,12
0062:  DATA 75,00
0063:  DATA 46,39
0064:  DATA E5,31
0065:  DATA 28,24
0066:  DATA FA,14
0067:  DATA 3A,10
0068:  DATA 25,26
0069:  DATA 75,00
*
01C1:  MOVF   0B,W
01C2:  MOVWF  3D
01C3:  BCF    0B.7
01C4:  BSF    03.5
01C5:  BSF    03.6
01C6:  BSF    0C.7
01C7:  BSF    0C.0
01C8:  NOP
01C9:  NOP
01CA:  BCF    03.5
01CB:  BCF    03.6
01CC:  BTFSC  3D.7
01CD:  BSF    0B.7
01CE:  BSF    03.6
01CF:  MOVF   0C,W
01D0:  ANDLW  7F
01D1:  BTFSC  03.2
01D2:  GOTO   215
01D3:  BCF    03.6
01D4:  MOVWF  3D
01D5:  BSF    03.6
01D6:  MOVF   0D,W
01D7:  BCF    03.6
01D8:  MOVWF  3E
01D9:  BSF    03.6
01DA:  MOVF   0F,W
01DB:  BCF    03.6
01DC:  MOVWF  3F
01DD:  MOVF   3D,W
01DE:  MOVWF  4D
01DF:  CALL   195
01E0:  MOVF   3E,W
01E1:  BSF    03.6
01E2:  MOVWF  0D
01E3:  BCF    03.6
01E4:  MOVF   3F,W
01E5:  BSF    03.6
01E6:  MOVWF  0F
01E7:  BCF    03.6
01E8:  MOVF   0B,W
01E9:  MOVWF  40
01EA:  BCF    0B.7
01EB:  BSF    03.5
01EC:  BSF    03.6
01ED:  BSF    0C.7
01EE:  BSF    0C.0
01EF:  NOP
01F0:  NOP
01F1:  BCF    03.5
01F2:  BCF    03.6
01F3:  BTFSC  40.7
01F4:  BSF    0B.7
01F5:  BSF    03.6
01F6:  RLF    0C,W
01F7:  RLF    0E,W
01F8:  ANDLW  7F
01F9:  BTFSC  03.2
01FA:  GOTO   215
01FB:  BCF    03.6
01FC:  MOVWF  3D
01FD:  BSF    03.6
01FE:  MOVF   0D,W
01FF:  BCF    03.6
0200:  MOVWF  3E
0201:  BSF    03.6
0202:  MOVF   0F,W
0203:  BCF    03.6
0204:  MOVWF  3F
0205:  MOVF   3D,W
0206:  MOVWF  4D
0207:  CALL   195
0208:  MOVF   3E,W
0209:  BSF    03.6
020A:  MOVWF  0D
020B:  BCF    03.6
020C:  MOVF   3F,W
020D:  BSF    03.6
020E:  MOVWF  0F
020F:  INCF   0D,F
0210:  BTFSC  03.2
0211:  INCF   0F,F
0212:  BCF    03.6
0213:  GOTO   1C1
0214:  BSF    03.6
0215:  BCF    03.6
0216:  RETURN
0217:  BTFSC  03.1
0218:  GOTO   21C
0219:  MOVLW  55
021A:  MOVWF  04
021B:  BCF    03.7
021C:  CLRF   77
021D:  CLRF   78
021E:  CLRF   79
021F:  CLRF   7A
0220:  CLRF   55
0221:  CLRF   56
0222:  CLRF   57
0223:  CLRF   58
0224:  MOVF   54,W
0225:  IORWF  53,W
0226:  IORWF  52,W
0227:  IORWF  51,W
0228:  BTFSC  03.2
0229:  GOTO   25A
022A:  MOVLW  20
022B:  MOVWF  59
022C:  BCF    03.0
022D:  RLF    4D,F
022E:  RLF    4E,F
022F:  RLF    4F,F
0230:  RLF    50,F
0231:  RLF    55,F
0232:  RLF    56,F
0233:  RLF    57,F
0234:  RLF    58,F
0235:  MOVF   54,W
0236:  SUBWF  58,W
0237:  BTFSS  03.2
0238:  GOTO   243
0239:  MOVF   53,W
023A:  SUBWF  57,W
023B:  BTFSS  03.2
023C:  GOTO   243
023D:  MOVF   52,W
023E:  SUBWF  56,W
023F:  BTFSS  03.2
0240:  GOTO   243
0241:  MOVF   51,W
0242:  SUBWF  55,W
0243:  BTFSS  03.0
0244:  GOTO   254
0245:  MOVF   51,W
0246:  SUBWF  55,F
0247:  MOVF   52,W
0248:  BTFSS  03.0
0249:  INCFSZ 52,W
024A:  SUBWF  56,F
024B:  MOVF   53,W
024C:  BTFSS  03.0
024D:  INCFSZ 53,W
024E:  SUBWF  57,F
024F:  MOVF   54,W
0250:  BTFSS  03.0
0251:  INCFSZ 54,W
0252:  SUBWF  58,F
0253:  BSF    03.0
0254:  RLF    77,F
0255:  RLF    78,F
0256:  RLF    79,F
0257:  RLF    7A,F
0258:  DECFSZ 59,F
0259:  GOTO   22C
025A:  MOVF   55,W
025B:  MOVWF  00
025C:  INCF   04,F
025D:  MOVF   56,W
025E:  MOVWF  00
025F:  INCF   04,F
0260:  MOVF   57,W
0261:  MOVWF  00
0262:  INCF   04,F
0263:  MOVF   58,W
0264:  MOVWF  00
0265:  RETURN
0266:  MOVLW  20
0267:  MOVWF  49
0268:  CLRF   45
0269:  CLRF   46
026A:  CLRF   47
026B:  CLRF   48
026C:  MOVF   40,W
026D:  MOVWF  7A
026E:  MOVF   3F,W
026F:  MOVWF  79
0270:  MOVF   3E,W
0271:  MOVWF  78
0272:  MOVF   3D,W
0273:  MOVWF  77
0274:  BCF    03.0
0275:  BTFSS  77.0
0276:  GOTO   285
0277:  MOVF   41,W
0278:  ADDWF  45,F
0279:  MOVF   42,W
027A:  BTFSC  03.0
027B:  INCFSZ 42,W
027C:  ADDWF  46,F
027D:  MOVF   43,W
027E:  BTFSC  03.0
027F:  INCFSZ 43,W
0280:  ADDWF  47,F
0281:  MOVF   44,W
0282:  BTFSC  03.0
0283:  INCFSZ 44,W
0284:  ADDWF  48,F
0285:  RRF    48,F
0286:  RRF    47,F
0287:  RRF    46,F
0288:  RRF    45,F
0289:  RRF    7A,F
028A:  RRF    79,F
028B:  RRF    78,F
028C:  RRF    77,F
028D:  DECFSZ 49,F
028E:  GOTO   274
028F:  RETURN
*
0389:  MOVF   0B,W
038A:  MOVWF  42
038B:  BCF    0B.7
038C:  BSF    03.5
038D:  BSF    03.6
038E:  BSF    0C.7
038F:  BSF    0C.0
0390:  NOP
0391:  NOP
0392:  BCF    03.5
0393:  BCF    03.6
0394:  BTFSC  42.7
0395:  BSF    0B.7
0396:  BTFSC  03.0
0397:  GOTO   3C0
0398:  BSF    03.6
0399:  MOVF   0C,W
039A:  ANDLW  7F
039B:  BCF    03.6
039C:  MOVWF  42
039D:  BSF    03.6
039E:  MOVF   0D,W
039F:  BCF    03.6
03A0:  MOVWF  43
03A1:  BSF    03.6
03A2:  MOVF   0F,W
03A3:  BCF    03.6
03A4:  MOVWF  44
03A5:  MOVF   42,W
03A6:  MOVWF  4D
03A7:  CALL   195
03A8:  MOVF   43,W
03A9:  BSF    03.6
03AA:  MOVWF  0D
03AB:  BCF    03.6
03AC:  MOVF   44,W
03AD:  BSF    03.6
03AE:  MOVWF  0F
03AF:  BCF    03.6
03B0:  MOVF   0B,W
03B1:  MOVWF  45
03B2:  BCF    0B.7
03B3:  BSF    03.5
03B4:  BSF    03.6
03B5:  BSF    0C.7
03B6:  BSF    0C.0
03B7:  NOP
03B8:  NOP
03B9:  BCF    03.5
03BA:  BCF    03.6
03BB:  BTFSC  45.7
03BC:  BSF    0B.7
03BD:  DECFSZ 41,F
03BE:  GOTO   3C0
03BF:  GOTO   3DF
03C0:  BSF    03.6
03C1:  RLF    0C,W
03C2:  RLF    0E,W
03C3:  ANDLW  7F
03C4:  BCF    03.6
03C5:  MOVWF  42
03C6:  BSF    03.6
03C7:  MOVF   0D,W
03C8:  BCF    03.6
03C9:  MOVWF  43
03CA:  BSF    03.6
03CB:  MOVF   0F,W
03CC:  BCF    03.6
03CD:  MOVWF  44
03CE:  MOVF   42,W
03CF:  MOVWF  4D
03D0:  CALL   195
03D1:  MOVF   43,W
03D2:  BSF    03.6
03D3:  MOVWF  0D
03D4:  BCF    03.6
03D5:  MOVF   44,W
03D6:  BSF    03.6
03D7:  MOVWF  0F
03D8:  INCF   0D,F
03D9:  BTFSC  03.2
03DA:  INCF   0F,F
03DB:  BCF    03.0
03DC:  BCF    03.6
03DD:  DECFSZ 41,F
03DE:  GOTO   389
03DF:  RETURN
03E0:  MOVF   40,W
03E1:  CLRF   78
03E2:  SUBWF  3F,W
03E3:  BTFSC  03.0
03E4:  GOTO   3E8
03E5:  MOVF   3F,W
03E6:  MOVWF  77
03E7:  GOTO   3F4
03E8:  CLRF   77
03E9:  MOVLW  08
03EA:  MOVWF  41
03EB:  RLF    3F,F
03EC:  RLF    77,F
03ED:  MOVF   40,W
03EE:  SUBWF  77,W
03EF:  BTFSC  03.0
03F0:  MOVWF  77
03F1:  RLF    78,F
03F2:  DECFSZ 41,F
03F3:  GOTO   3EB
03F4:  RETURN
03F5:  MOVF   78,W
03F6:  MOVF   3D,W
03F7:  MOVWF  3F
03F8:  MOVLW  64
03F9:  MOVWF  40
03FA:  CALL   3E0
03FB:  MOVF   77,W
03FC:  MOVWF  3D
03FD:  MOVF   78,W
03FE:  MOVLW  30
03FF:  BTFSS  03.2
0400:  GOTO   408
0401:  BTFSS  3E.1
0402:  GOTO   40F
0403:  BTFSC  3E.3
0404:  GOTO   40F
0405:  BTFSC  3E.4
0406:  MOVLW  20
0407:  GOTO   40B
0408:  BCF    3E.3
0409:  BCF    3E.4
040A:  BSF    3E.0
040B:  ADDWF  78,F
040C:  MOVF   78,W
040D:  MOVWF  4D
040E:  CALL   195
040F:  MOVF   3D,W
0410:  MOVWF  3F
0411:  MOVLW  0A
0412:  MOVWF  40
0413:  CALL   3E0
0414:  MOVF   77,W
0415:  MOVWF  3D
0416:  MOVF   78,W
0417:  MOVLW  30
0418:  BTFSS  03.2
0419:  GOTO   420
041A:  BTFSC  3E.3
041B:  GOTO   424
041C:  BTFSS  3E.0
041D:  GOTO   424
041E:  BTFSC  3E.4
041F:  MOVLW  20
0420:  ADDWF  78,F
0421:  MOVF   78,W
0422:  MOVWF  4D
0423:  CALL   195
0424:  MOVLW  30
0425:  ADDWF  3D,F
0426:  MOVF   3D,W
0427:  MOVWF  4D
0428:  CALL   195
0429:  BCF    0A.3
042A:  BCF    0A.4
042B:  GOTO   524 (RETURN)
042C:  MOVF   04,W
042D:  MOVWF  45
042E:  MOVLW  3B
042F:  MOVWF  4C
0430:  MOVLW  9A
0431:  MOVWF  4B
0432:  MOVLW  CA
0433:  MOVWF  4A
0434:  CLRF   49
0435:  MOVLW  0A
0436:  MOVWF  47
0437:  BSF    03.1
0438:  MOVLW  41
0439:  MOVWF  04
043A:  BCF    03.7
043B:  MOVF   44,W
043C:  MOVWF  50
043D:  MOVF   43,W
043E:  MOVWF  4F
043F:  MOVF   42,W
0440:  MOVWF  4E
0441:  MOVF   41,W
0442:  MOVWF  4D
0443:  MOVF   4C,W
0444:  MOVWF  54
0445:  MOVF   4B,W
0446:  MOVWF  53
0447:  MOVF   4A,W
0448:  MOVWF  52
0449:  MOVF   49,W
044A:  MOVWF  51
044B:  CALL   217
044C:  MOVF   78,W
044D:  MOVF   77,F
044E:  BTFSS  03.2
044F:  GOTO   463
0450:  MOVF   47,W
0451:  XORLW  01
0452:  BTFSC  03.2
0453:  GOTO   463
0454:  MOVF   45,W
0455:  BTFSC  03.2
0456:  GOTO   464
0457:  ANDLW  0F
0458:  SUBWF  47,W
0459:  BTFSC  03.2
045A:  GOTO   45D
045B:  BTFSC  03.0
045C:  GOTO   469
045D:  BTFSC  45.7
045E:  GOTO   469
045F:  BTFSC  45.6
0460:  GOTO   464
0461:  MOVLW  20
0462:  GOTO   465
0463:  CLRF   45
0464:  MOVLW  30
0465:  ADDWF  77,F
0466:  MOVF   77,W
0467:  MOVWF  4D
0468:  CALL   195
0469:  BCF    03.1
046A:  MOVF   4C,W
046B:  MOVWF  50
046C:  MOVF   4B,W
046D:  MOVWF  4F
046E:  MOVF   4A,W
046F:  MOVWF  4E
0470:  MOVF   49,W
0471:  MOVWF  4D
0472:  CLRF   54
0473:  CLRF   53
0474:  CLRF   52
0475:  MOVLW  0A
0476:  MOVWF  51
0477:  CALL   217
0478:  MOVF   7A,W
0479:  MOVWF  4C
047A:  MOVF   79,W
047B:  MOVWF  4B
047C:  MOVF   78,W
047D:  MOVWF  4A
047E:  MOVF   77,W
047F:  MOVWF  49
0480:  DECFSZ 47,F
0481:  GOTO   437
0482:  BCF    0A.3
0483:  BCF    0A.4
0484:  GOTO   554 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(clock = 20000000) 
*
006A:  MOVLW  4E
006B:  MOVWF  04
006C:  BCF    03.7
006D:  MOVF   00,W
006E:  BTFSC  03.2
006F:  GOTO   07D
0070:  MOVLW  06
0071:  MOVWF  78
0072:  CLRF   77
0073:  DECFSZ 77,F
0074:  GOTO   073
0075:  DECFSZ 78,F
0076:  GOTO   072
0077:  MOVLW  7B
0078:  MOVWF  77
0079:  DECFSZ 77,F
007A:  GOTO   079
007B:  DECFSZ 00,F
007C:  GOTO   070
007D:  RETURN
.................... //~ #include <math.h> 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00E7:  BSF    08.4
....................    output_float(LCD_DATA5); 
00E8:  BSF    08.5
....................    output_float(LCD_DATA6); 
00E9:  BSF    08.6
....................    output_float(LCD_DATA7); 
00EA:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00EB:  BCF    03.5
00EC:  BSF    05.0
00ED:  BSF    03.5
00EE:  BCF    05.0
....................    delay_cycles(1); 
00EF:  NOP
....................    lcd_output_enable(1); 
00F0:  BCF    03.5
00F1:  BSF    08.3
00F2:  BSF    03.5
00F3:  BCF    08.3
....................    delay_cycles(1); 
00F4:  NOP
....................    high = lcd_read_nibble(); 
00F5:  BCF    03.5
00F6:  CALL   0AE
00F7:  MOVF   78,W
00F8:  MOVWF  55
....................        
....................    lcd_output_enable(0); 
00F9:  BCF    08.3
00FA:  BSF    03.5
00FB:  BCF    08.3
....................    delay_cycles(1); 
00FC:  NOP
....................    lcd_output_enable(1); 
00FD:  BCF    03.5
00FE:  BSF    08.3
00FF:  BSF    03.5
0100:  BCF    08.3
....................    delay_us(1); 
0101:  GOTO   102
0102:  GOTO   103
0103:  NOP
....................    low = lcd_read_nibble(); 
0104:  BCF    03.5
0105:  CALL   0AE
0106:  MOVF   78,W
0107:  MOVWF  54
....................        
....................    lcd_output_enable(0); 
0108:  BCF    08.3
0109:  BSF    03.5
010A:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
010B:  BCF    08.4
....................    output_drive(LCD_DATA5); 
010C:  BCF    08.5
....................    output_drive(LCD_DATA6); 
010D:  BCF    08.6
....................    output_drive(LCD_DATA7); 
010E:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
010F:  BCF    03.5
0110:  SWAPF  55,W
0111:  MOVWF  77
0112:  MOVLW  F0
0113:  ANDWF  77,F
0114:  MOVF   77,W
0115:  IORWF  54,W
0116:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00AE:  CLRF   56
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00AF:  BSF    03.5
00B0:  BSF    08.4
00B1:  MOVLW  00
00B2:  BCF    03.5
00B3:  BTFSC  08.4
00B4:  MOVLW  01
00B5:  IORWF  56,F
....................    n |= input(LCD_DATA5) << 1; 
00B6:  BSF    03.5
00B7:  BSF    08.5
00B8:  MOVLW  00
00B9:  BCF    03.5
00BA:  BTFSC  08.5
00BB:  MOVLW  01
00BC:  MOVWF  77
00BD:  BCF    03.0
00BE:  RLF    77,F
00BF:  MOVF   77,W
00C0:  IORWF  56,F
....................    n |= input(LCD_DATA6) << 2; 
00C1:  BSF    03.5
00C2:  BSF    08.6
00C3:  MOVLW  00
00C4:  BCF    03.5
00C5:  BTFSC  08.6
00C6:  MOVLW  01
00C7:  MOVWF  77
00C8:  RLF    77,F
00C9:  RLF    77,F
00CA:  MOVLW  FC
00CB:  ANDWF  77,F
00CC:  MOVF   77,W
00CD:  IORWF  56,F
....................    n |= input(LCD_DATA7) << 3; 
00CE:  BSF    03.5
00CF:  BSF    08.7
00D0:  MOVLW  00
00D1:  BCF    03.5
00D2:  BTFSC  08.7
00D3:  MOVLW  01
00D4:  MOVWF  77
00D5:  RLF    77,F
00D6:  RLF    77,F
00D7:  RLF    77,F
00D8:  MOVLW  F8
00D9:  ANDWF  77,F
00DA:  MOVF   77,W
00DB:  IORWF  56,F
....................     
....................    return(n); 
00DC:  MOVF   56,W
00DD:  MOVWF  78
....................   #else 
00DE:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
007E:  BTFSC  55.0
007F:  GOTO   082
0080:  BCF    08.4
0081:  GOTO   083
0082:  BSF    08.4
0083:  BSF    03.5
0084:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0085:  BCF    03.5
0086:  BTFSC  55.1
0087:  GOTO   08A
0088:  BCF    08.5
0089:  GOTO   08B
008A:  BSF    08.5
008B:  BSF    03.5
008C:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
008D:  BCF    03.5
008E:  BTFSC  55.2
008F:  GOTO   092
0090:  BCF    08.6
0091:  GOTO   093
0092:  BSF    08.6
0093:  BSF    03.5
0094:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0095:  BCF    03.5
0096:  BTFSC  55.3
0097:  GOTO   09A
0098:  BCF    08.7
0099:  GOTO   09B
009A:  BSF    08.7
009B:  BSF    03.5
009C:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
009D:  NOP
....................    lcd_output_enable(1); 
009E:  BCF    03.5
009F:  BSF    08.3
00A0:  BSF    03.5
00A1:  BCF    08.3
....................    delay_us(2); 
00A2:  MOVLW  02
00A3:  MOVWF  77
00A4:  DECFSZ 77,F
00A5:  GOTO   0A4
00A6:  GOTO   0A7
00A7:  NOP
....................    lcd_output_enable(0); 
00A8:  BCF    03.5
00A9:  BCF    08.3
00AA:  BSF    03.5
00AB:  BCF    08.3
00AC:  BCF    03.5
00AD:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00DF:  BSF    03.5
00E0:  BCF    08.3
....................    lcd_rs_tris(); 
00E1:  BCF    08.2
....................    lcd_rw_tris(); 
00E2:  BCF    05.0
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00E3:  BCF    03.5
00E4:  BCF    08.2
00E5:  BSF    03.5
00E6:  BCF    08.2
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0117:  MOVF   78,W
0118:  MOVWF  54
0119:  BTFSS  54.7
011A:  GOTO   11D
011B:  BSF    03.5
011C:  GOTO   0E7
....................    lcd_output_rs(address); 
011D:  MOVF   52,F
011E:  BTFSS  03.2
011F:  GOTO   122
0120:  BCF    08.2
0121:  GOTO   123
0122:  BSF    08.2
0123:  BSF    03.5
0124:  BCF    08.2
....................    delay_cycles(1); 
0125:  NOP
....................    lcd_output_rw(0); 
0126:  BCF    03.5
0127:  BCF    05.0
0128:  BSF    03.5
0129:  BCF    05.0
....................    delay_cycles(1); 
012A:  NOP
....................    lcd_output_enable(0); 
012B:  BCF    03.5
012C:  BCF    08.3
012D:  BSF    03.5
012E:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
012F:  BCF    03.5
0130:  SWAPF  53,W
0131:  MOVWF  54
0132:  MOVLW  0F
0133:  ANDWF  54,F
0134:  MOVF   54,W
0135:  MOVWF  55
0136:  CALL   07E
....................    lcd_send_nibble(n & 0xf); 
0137:  MOVF   53,W
0138:  ANDLW  0F
0139:  MOVWF  54
013A:  MOVWF  55
013B:  CALL   07E
013C:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
013D:  MOVLW  28
013E:  MOVWF  3E
013F:  MOVLW  0C
0140:  MOVWF  3F
0141:  MOVLW  01
0142:  MOVWF  40
0143:  MOVLW  06
0144:  MOVWF  41
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0145:  BCF    08.3
0146:  BSF    03.5
0147:  BCF    08.3
....................    lcd_output_rs(0); 
0148:  BCF    03.5
0149:  BCF    08.2
014A:  BSF    03.5
014B:  BCF    08.2
....................    lcd_output_rw(0); 
014C:  BCF    03.5
014D:  BCF    05.0
014E:  BSF    03.5
014F:  BCF    05.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0150:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0151:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0152:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0153:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0154:  BCF    08.3
....................    lcd_rs_tris(); 
0155:  BCF    08.2
....................    lcd_rw_tris(); 
0156:  BCF    05.0
....................  #endif 
....................      
....................    delay_ms(15); 
0157:  MOVLW  0F
0158:  BCF    03.5
0159:  MOVWF  4E
015A:  CALL   06A
....................    for(i=1;i<=3;++i) 
015B:  MOVLW  01
015C:  MOVWF  3D
015D:  MOVF   3D,W
015E:  SUBLW  03
015F:  BTFSS  03.0
0160:  GOTO   169
....................    { 
....................        lcd_send_nibble(3); 
0161:  MOVLW  03
0162:  MOVWF  55
0163:  CALL   07E
....................        delay_ms(5); 
0164:  MOVLW  05
0165:  MOVWF  4E
0166:  CALL   06A
0167:  INCF   3D,F
0168:  GOTO   15D
....................    } 
....................     
....................    lcd_send_nibble(2); 
0169:  MOVLW  02
016A:  MOVWF  55
016B:  CALL   07E
....................    delay_ms(5); 
016C:  MOVLW  05
016D:  MOVWF  4E
016E:  CALL   06A
....................    for(i=0;i<=3;++i) 
016F:  CLRF   3D
0170:  MOVF   3D,W
0171:  SUBLW  03
0172:  BTFSS  03.0
0173:  GOTO   180
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0174:  MOVLW  3E
0175:  ADDWF  3D,W
0176:  MOVWF  04
0177:  BCF    03.7
0178:  MOVF   00,W
0179:  MOVWF  42
017A:  CLRF   52
017B:  MOVF   42,W
017C:  MOVWF  53
017D:  CALL   0DF
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
017E:  INCF   3D,F
017F:  GOTO   170
0180:  BCF    0A.3
0181:  BCF    0A.4
0182:  GOTO   4AE (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0183:  DECFSZ 4F,W
0184:  GOTO   186
0185:  GOTO   189
....................       address=LCD_LINE_TWO; 
0186:  MOVLW  40
0187:  MOVWF  50
0188:  GOTO   18A
....................    else 
....................       address=0; 
0189:  CLRF   50
....................       
....................    address+=x-1; 
018A:  MOVLW  01
018B:  SUBWF  4E,W
018C:  ADDWF  50,F
....................    lcd_send_byte(0,0x80|address); 
018D:  MOVF   50,W
018E:  IORLW  80
018F:  MOVWF  51
0190:  CLRF   52
0191:  MOVF   51,W
0192:  MOVWF  53
0193:  CALL   0DF
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0194:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0195:  MOVF   4D,W
0196:  XORLW  07
0197:  BTFSC  03.2
0198:  GOTO   1A3
0199:  XORLW  0B
019A:  BTFSC  03.2
019B:  GOTO   1A8
019C:  XORLW  06
019D:  BTFSC  03.2
019E:  GOTO   1B0
019F:  XORLW  02
01A0:  BTFSC  03.2
01A1:  GOTO   1B6
01A2:  GOTO   1BB
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01A3:  MOVLW  01
01A4:  MOVWF  4E
01A5:  MOVWF  4F
01A6:  CALL   183
01A7:  GOTO   1C0
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01A8:  CLRF   52
01A9:  MOVLW  01
01AA:  MOVWF  53
01AB:  CALL   0DF
....................                      delay_ms(2); 
01AC:  MOVLW  02
01AD:  MOVWF  4E
01AE:  CALL   06A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01AF:  GOTO   1C0
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01B0:  MOVLW  01
01B1:  MOVWF  4E
01B2:  MOVLW  02
01B3:  MOVWF  4F
01B4:  CALL   183
01B5:  GOTO   1C0
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01B6:  CLRF   52
01B7:  MOVLW  10
01B8:  MOVWF  53
01B9:  CALL   0DF
01BA:  GOTO   1C0
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01BB:  MOVLW  01
01BC:  MOVWF  52
01BD:  MOVF   4D,W
01BE:  MOVWF  53
01BF:  CALL   0DF
....................      #endif 
....................    } 
01C0:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... //~ #include <stdlib.h> 
....................  
.................... int8    carga; 
.................... int32    f=34; 
.................... int32    ifrecuencia; 
....................  
.................... char     frecuencia[]="03000 Hz"; 
*
0495:  MOVLW  30
0496:  BCF    03.5
0497:  MOVWF  34
0498:  MOVLW  33
0499:  MOVWF  35
049A:  MOVLW  30
049B:  MOVWF  36
049C:  MOVWF  37
049D:  MOVWF  38
049E:  MOVLW  20
049F:  MOVWF  39
04A0:  MOVLW  48
04A1:  MOVWF  3A
04A2:  MOVLW  7A
04A3:  MOVWF  3B
04A4:  CLRF   3C
....................  
.................... void     showFrecuencia() 
.................... { 
....................    ifrecuencia=f*100; 
*
0290:  MOVF   2F,W
0291:  MOVWF  40
0292:  MOVF   2E,W
0293:  MOVWF  3F
0294:  MOVF   2D,W
0295:  MOVWF  3E
0296:  MOVF   2C,W
0297:  MOVWF  3D
0298:  CLRF   44
0299:  CLRF   43
029A:  CLRF   42
029B:  MOVLW  64
029C:  MOVWF  41
029D:  CALL   266
029E:  MOVF   7A,W
029F:  MOVWF  33
02A0:  MOVF   79,W
02A1:  MOVWF  32
02A2:  MOVF   78,W
02A3:  MOVWF  31
02A4:  MOVF   77,W
02A5:  MOVWF  30
....................    frecuencia[0]=ifrecuencia/10000+48; 
02A6:  BCF    03.1
02A7:  MOVF   33,W
02A8:  MOVWF  50
02A9:  MOVF   32,W
02AA:  MOVWF  4F
02AB:  MOVF   31,W
02AC:  MOVWF  4E
02AD:  MOVF   30,W
02AE:  MOVWF  4D
02AF:  CLRF   54
02B0:  CLRF   53
02B1:  MOVLW  27
02B2:  MOVWF  52
02B3:  MOVLW  10
02B4:  MOVWF  51
02B5:  CALL   217
02B6:  MOVLW  30
02B7:  ADDWF  77,W
02B8:  MOVWF  34
....................       if((frecuencia[0]<48)||(frecuencia[0]>57)){frecuencia[0]=48;} 
02B9:  MOVF   34,W
02BA:  SUBLW  2F
02BB:  BTFSC  03.0
02BC:  GOTO   2C1
02BD:  MOVF   34,W
02BE:  SUBLW  39
02BF:  BTFSC  03.0
02C0:  GOTO   2C3
02C1:  MOVLW  30
02C2:  MOVWF  34
....................    frecuencia[1]=ifrecuencia/1000+48; 
02C3:  BCF    03.1
02C4:  MOVF   33,W
02C5:  MOVWF  50
02C6:  MOVF   32,W
02C7:  MOVWF  4F
02C8:  MOVF   31,W
02C9:  MOVWF  4E
02CA:  MOVF   30,W
02CB:  MOVWF  4D
02CC:  CLRF   54
02CD:  CLRF   53
02CE:  MOVLW  03
02CF:  MOVWF  52
02D0:  MOVLW  E8
02D1:  MOVWF  51
02D2:  CALL   217
02D3:  MOVLW  30
02D4:  ADDWF  77,W
02D5:  MOVWF  35
....................       if((frecuencia[1]<48)||(frecuencia[1]>57)){frecuencia[1]=48;} 
02D6:  MOVF   35,W
02D7:  SUBLW  2F
02D8:  BTFSC  03.0
02D9:  GOTO   2DE
02DA:  MOVF   35,W
02DB:  SUBLW  39
02DC:  BTFSC  03.0
02DD:  GOTO   2E0
02DE:  MOVLW  30
02DF:  MOVWF  35
....................    frecuencia[2]=(ifrecuencia%1000)/10+48; 
02E0:  BSF    03.1
02E1:  MOVLW  3D
02E2:  MOVWF  04
02E3:  BCF    03.7
02E4:  MOVF   33,W
02E5:  MOVWF  50
02E6:  MOVF   32,W
02E7:  MOVWF  4F
02E8:  MOVF   31,W
02E9:  MOVWF  4E
02EA:  MOVF   30,W
02EB:  MOVWF  4D
02EC:  CLRF   54
02ED:  CLRF   53
02EE:  MOVLW  03
02EF:  MOVWF  52
02F0:  MOVLW  E8
02F1:  MOVWF  51
02F2:  CALL   217
02F3:  MOVF   40,W
02F4:  MOVWF  44
02F5:  MOVF   3F,W
02F6:  MOVWF  43
02F7:  MOVF   3E,W
02F8:  MOVWF  42
02F9:  MOVF   3D,W
02FA:  MOVWF  41
02FB:  CLRF   46
02FC:  MOVF   04,W
02FD:  MOVWF  45
02FE:  BCF    46.0
02FF:  BTFSC  03.7
0300:  BSF    46.0
0301:  BCF    03.1
0302:  MOVF   40,W
0303:  MOVWF  50
0304:  MOVF   3F,W
0305:  MOVWF  4F
0306:  MOVF   3E,W
0307:  MOVWF  4E
0308:  MOVF   3D,W
0309:  MOVWF  4D
030A:  CLRF   54
030B:  CLRF   53
030C:  CLRF   52
030D:  MOVLW  0A
030E:  MOVWF  51
030F:  CALL   217
0310:  MOVF   45,W
0311:  MOVWF  04
0312:  BCF    03.7
0313:  BTFSC  46.0
0314:  BSF    03.7
0315:  MOVLW  30
0316:  ADDWF  77,W
0317:  MOVWF  36
....................       if((frecuencia[2]<48)||(frecuencia[2]>57)){frecuencia[2]=48;} 
0318:  MOVF   36,W
0319:  SUBLW  2F
031A:  BTFSC  03.0
031B:  GOTO   320
031C:  MOVF   36,W
031D:  SUBLW  39
031E:  BTFSC  03.0
031F:  GOTO   322
0320:  MOVLW  30
0321:  MOVWF  36
....................    frecuencia[3]=(ifrecuencia%1000)%10+48; 
0322:  BSF    03.1
0323:  MOVLW  3D
0324:  MOVWF  04
0325:  BCF    03.7
0326:  MOVF   33,W
0327:  MOVWF  50
0328:  MOVF   32,W
0329:  MOVWF  4F
032A:  MOVF   31,W
032B:  MOVWF  4E
032C:  MOVF   30,W
032D:  MOVWF  4D
032E:  CLRF   54
032F:  CLRF   53
0330:  MOVLW  03
0331:  MOVWF  52
0332:  MOVLW  E8
0333:  MOVWF  51
0334:  CALL   217
0335:  MOVF   40,W
0336:  MOVWF  44
0337:  MOVF   3F,W
0338:  MOVWF  43
0339:  MOVF   3E,W
033A:  MOVWF  42
033B:  MOVF   3D,W
033C:  MOVWF  41
033D:  CLRF   46
033E:  MOVF   04,W
033F:  MOVWF  45
0340:  BCF    46.0
0341:  BTFSC  03.7
0342:  BSF    46.0
0343:  BSF    03.1
0344:  MOVLW  47
0345:  MOVWF  04
0346:  BCF    03.7
0347:  MOVF   40,W
0348:  MOVWF  50
0349:  MOVF   3F,W
034A:  MOVWF  4F
034B:  MOVF   3E,W
034C:  MOVWF  4E
034D:  MOVF   3D,W
034E:  MOVWF  4D
034F:  CLRF   54
0350:  CLRF   53
0351:  CLRF   52
0352:  MOVLW  0A
0353:  MOVWF  51
0354:  CALL   217
0355:  MOVF   45,W
0356:  MOVWF  04
0357:  BCF    03.7
0358:  BTFSC  46.0
0359:  BSF    03.7
035A:  MOVLW  30
035B:  ADDWF  47,W
035C:  MOVWF  37
....................       if((frecuencia[3]<48)||(frecuencia[3]>57)){frecuencia[3]=48;} 
035D:  MOVF   37,W
035E:  SUBLW  2F
035F:  BTFSC  03.0
0360:  GOTO   365
0361:  MOVF   37,W
0362:  SUBLW  39
0363:  BTFSC  03.0
0364:  GOTO   367
0365:  MOVLW  30
0366:  MOVWF  37
....................    frecuencia[4]=ifrecuencia%10+48; 
0367:  BSF    03.1
0368:  MOVLW  3D
0369:  MOVWF  04
036A:  BCF    03.7
036B:  MOVF   33,W
036C:  MOVWF  50
036D:  MOVF   32,W
036E:  MOVWF  4F
036F:  MOVF   31,W
0370:  MOVWF  4E
0371:  MOVF   30,W
0372:  MOVWF  4D
0373:  CLRF   54
0374:  CLRF   53
0375:  CLRF   52
0376:  MOVLW  0A
0377:  MOVWF  51
0378:  CALL   217
0379:  MOVLW  30
037A:  ADDWF  3D,W
037B:  MOVWF  38
....................       if((frecuencia[4]<48)||(frecuencia[4]>57)){frecuencia[4]=48;} 
037C:  MOVF   38,W
037D:  SUBLW  2F
037E:  BTFSC  03.0
037F:  GOTO   384
0380:  MOVF   38,W
0381:  SUBLW  39
0382:  BTFSC  03.0
0383:  GOTO   386
0384:  MOVLW  30
0385:  MOVWF  38
0386:  BCF    0A.3
0387:  BCF    0A.4
0388:  GOTO   50A (RETURN)
.................... } 
....................  
.................... #INT_TIMER0 
.................... void     timer0_int() 
.................... { 
....................    output_toggle(PIN_E1); 
*
004F:  BSF    03.5
0050:  BCF    09.1
0051:  MOVLW  02
0052:  BCF    03.5
0053:  XORWF  09,F
....................    set_timer0(carga); 
0054:  MOVF   2B,W
0055:  MOVWF  01
0056:  BCF    0B.2
0057:  BCF    0A.3
0058:  BCF    0A.4
0059:  GOTO   02B
.................... } 
....................  
.................... void     main() 
*
0485:  MOVF   03,W
0486:  ANDLW  1F
0487:  MOVWF  03
0488:  CLRF   2F
0489:  CLRF   2E
048A:  CLRF   2D
048B:  MOVLW  22
048C:  MOVWF  2C
048D:  BSF    03.5
048E:  BSF    1F.0
048F:  BSF    1F.1
0490:  BSF    1F.2
0491:  BCF    1F.3
0492:  MOVLW  07
0493:  MOVWF  1C
0494:  BCF    03.7
.................... { 
....................    set_tris_b(0x0F); 
*
04A5:  MOVLW  0F
04A6:  BSF    03.5
04A7:  MOVWF  06
....................    set_tris_e(0x00); 
04A8:  BCF    09.0
04A9:  BCF    09.1
04AA:  BCF    09.2
....................    port_b_pullups(FALSE); 
04AB:  BSF    01.7
....................  
....................    lcd_init(); 
04AC:  BCF    03.5
04AD:  GOTO   13D
....................     
....................    lcd_putc("Error"); 
04AE:  MOVLW  5A
04AF:  BSF    03.6
04B0:  MOVWF  0D
04B1:  MOVLW  00
04B2:  MOVWF  0F
04B3:  BCF    03.6
04B4:  CALL   1C1
....................  
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4); 
04B5:  BSF    03.5
04B6:  MOVF   01,W
04B7:  ANDLW  C0
04B8:  IORLW  01
04B9:  MOVWF  01
....................    carga=256-200000/(8*4*f)+15; 
04BA:  BCF    03.5
04BB:  RLF    2C,W
04BC:  MOVWF  77
04BD:  RLF    2D,W
04BE:  MOVWF  78
04BF:  RLF    2E,W
04C0:  MOVWF  79
04C1:  RLF    2F,W
04C2:  MOVWF  7A
04C3:  RLF    77,F
04C4:  RLF    78,F
04C5:  RLF    79,F
04C6:  RLF    7A,F
04C7:  RLF    77,F
04C8:  RLF    78,F
04C9:  RLF    79,F
04CA:  RLF    7A,F
04CB:  RLF    77,F
04CC:  RLF    78,F
04CD:  RLF    79,F
04CE:  RLF    7A,F
04CF:  RLF    77,F
04D0:  RLF    78,F
04D1:  RLF    79,F
04D2:  RLF    7A,F
04D3:  MOVLW  E0
04D4:  ANDWF  77,F
04D5:  MOVF   7A,W
04D6:  MOVWF  40
04D7:  MOVF   79,W
04D8:  MOVWF  3F
04D9:  MOVF   78,W
04DA:  MOVWF  3E
04DB:  MOVF   77,W
04DC:  MOVWF  3D
04DD:  BCF    03.1
04DE:  CLRF   50
04DF:  MOVLW  03
04E0:  MOVWF  4F
04E1:  MOVLW  0D
04E2:  MOVWF  4E
04E3:  MOVLW  40
04E4:  MOVWF  4D
04E5:  MOVF   7A,W
04E6:  MOVWF  54
04E7:  MOVF   79,W
04E8:  MOVWF  53
04E9:  MOVF   78,W
04EA:  MOVWF  52
04EB:  MOVF   77,W
04EC:  MOVWF  51
04ED:  CALL   217
04EE:  MOVF   77,W
04EF:  SUBLW  00
04F0:  MOVWF  3D
04F1:  MOVLW  01
04F2:  MOVWF  3E
04F3:  MOVF   78,W
04F4:  BTFSS  03.0
04F5:  INCFSZ 78,W
04F6:  SUBWF  3E,F
04F7:  CLRF   3F
04F8:  MOVF   79,W
04F9:  BTFSS  03.0
04FA:  INCFSZ 79,W
04FB:  SUBWF  3F,F
04FC:  CLRF   40
04FD:  MOVF   7A,W
04FE:  BTFSS  03.0
04FF:  INCFSZ 7A,W
0500:  SUBWF  40,F
0501:  MOVLW  0F
0502:  ADDWF  3D,W
0503:  MOVWF  2B
....................    set_timer0(carga); 
0504:  MOVF   2B,W
0505:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
0506:  BSF    0B.5
....................    enable_interrupts(global); 
0507:  MOVLW  C0
0508:  IORWF  0B,F
....................     
....................    showFrecuencia(); 
0509:  GOTO   290
....................     
....................    while(1) 
....................    { 
....................       lcd_putc("\f"); 
050A:  MOVLW  5D
050B:  BSF    03.6
050C:  MOVWF  0D
050D:  MOVLW  00
050E:  MOVWF  0F
050F:  BCF    03.6
0510:  CALL   1C1
....................       lcd_gotoxy(1,1); 
0511:  MOVLW  01
0512:  MOVWF  4E
0513:  MOVWF  4F
0514:  CALL   183
....................       printf(lcd_putc,"Carga: %u", carga); 
0515:  MOVLW  5E
0516:  BSF    03.6
0517:  MOVWF  0D
0518:  MOVLW  00
0519:  MOVWF  0F
051A:  BCF    03.0
051B:  MOVLW  07
051C:  BCF    03.6
051D:  MOVWF  41
051E:  CALL   389
051F:  MOVF   2B,W
0520:  MOVWF  3D
0521:  MOVLW  1B
0522:  MOVWF  3E
0523:  GOTO   3F5
....................       lcd_gotoxy(1,2); 
0524:  MOVLW  01
0525:  MOVWF  4E
0526:  MOVLW  02
0527:  MOVWF  4F
0528:  CALL   183
....................       printf(lcd_putc,"Frec(Hz): %Lu", f*100); 
0529:  MOVF   2F,W
052A:  MOVWF  40
052B:  MOVF   2E,W
052C:  MOVWF  3F
052D:  MOVF   2D,W
052E:  MOVWF  3E
052F:  MOVF   2C,W
0530:  MOVWF  3D
0531:  CLRF   44
0532:  CLRF   43
0533:  CLRF   42
0534:  MOVLW  64
0535:  MOVWF  41
0536:  CALL   266
0537:  MOVF   7A,W
0538:  MOVWF  40
0539:  MOVF   79,W
053A:  MOVWF  3F
053B:  MOVF   78,W
053C:  MOVWF  3E
053D:  MOVF   77,W
053E:  MOVWF  3D
053F:  MOVLW  63
0540:  BSF    03.6
0541:  MOVWF  0D
0542:  MOVLW  00
0543:  MOVWF  0F
0544:  BCF    03.0
0545:  MOVLW  0A
0546:  BCF    03.6
0547:  MOVWF  41
0548:  CALL   389
0549:  MOVLW  41
054A:  MOVWF  04
054B:  MOVF   40,W
054C:  MOVWF  44
054D:  MOVF   3F,W
054E:  MOVWF  43
054F:  MOVF   3E,W
0550:  MOVWF  42
0551:  MOVF   3D,W
0552:  MOVWF  41
0553:  GOTO   42C
....................       delay_ms(100); 
0554:  MOVLW  64
0555:  MOVWF  4E
0556:  CALL   06A
0557:  GOTO   50A
....................    } 
.................... } 
....................  
0558:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
